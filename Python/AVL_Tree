# AVL tree implementation in Python
from collections import deque
class TreeNode(object):
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree(object):
    # Function to insert a node
    def insert_node(self, root, key):
        # Find the correct location and insert the node
        if not root:
            return TreeNode(key)
        if key < root.key:
            root.left = self.insert_node(root.left, key)
        else:
            root.right = self.insert_node(root.right, key)

        # Update height and balance factor
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        balance = self.get_balance(root)

        # Perform rotations if necessary
        if balance > 1:
            if key < root.left.key:
                return self.right_rotate(root)
            else:
                root.left = self.left_rotate(root.left)
                return self.right_rotate(root)
        if balance < -1:
            if key > root.right.key:
                return self.left_rotate(root)
            else:
                root.right = self.right_rotate(root.right)
                return self.left_rotate(root)

        return root
    
    def delete_node(self, root, key):
        if not root:
            return root

        # Perform standard BST delete
        if key < root.key:
            root.left = self.delete_node(root.left, key)
        elif key > root.key:
            root.right = self.delete_node(root.right, key)
        else:
            # Node to be deleted found
            if not root.left or not root.right:
                temp = root.left if root.left else root.right
                root = temp
            else:
                temp = self._min_value_node(root.right)
                root.key = temp.key
                root.right = self.delete_node(root.right, temp.key)

        # Update height and re-balance
        if root:
            root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
            balance = self.get_balance(root)

            if balance > 1:
                if self.get_balance(root.left) >= 0:
                    return self.right_rotate(root)
                else:
                    root.left = self.left_rotate(root.left)
                    return self.right_rotate(root)
            if balance < -1:
                if self.get_balance(root.right) <= 0:
                    return self.left_rotate(root)
                else:
                    root.right = self.right_rotate(root.right)
                    return self.left_rotate(root)

        return root

    # Helper functions (get_height, get_balance, rotations)...

    def _min_value_node(self, node):
        while node.left:
            node = node.left
        return node

    def get_height(self, node):
        return node.height if node else 0

    def get_balance(self, node):
        return self.get_height(node.left) - self.get_height(node.right)

    def left_rotate(self, z):
        y = z.right
        T2 = y.left
        y.left = z
        z.right = T2
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        return y

    def right_rotate(self, y):
        z = y.left
        T3 = z.right
        z.right = y
        y.left = T3
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        return z
    
    def levelOrder(root):
        res = []
        queue = deque([root])
        while queue:
            currLen = len(queue)
            for i in range(currLen):
                currNode = queue.popleft()
                res.append(currNode.key)
            if currNode.left:
                queue.append(currNode.left)
            if currNode.right:
                queue.append(currNode.right)
        return res

# Example usage
avl_tree = AVLTree()
root = None
root = avl_tree.insert_node(root, 5)
root = avl_tree.insert_node(root, 2)
root = avl_tree.insert_node(root, 8)
root = avl_tree.insert_node(root, 10)
root = avl_tree.insert_node(root, 12)
print("Level Order Traversal: ", AVLTree.levelOrder(root))